# VSR Dataset Description File
# Date: Oct 17th 2018
# Ver: v1.2.0

# changelog 2019-1-9:
# - `Root` will affect absolute url in `Dataset` as well
---
# Add root dir to dataset
# In current version, Root only affects members in "Path" and "Path_Tracked"
Root:
  /mnt/data/datasets/
#  c:/work/datasets
Path:
  BSD100: BSD100_SR/image_SRF_2/*HR.*
  BSD500-Train: BSR_bsds500/BSR/BSDS500/data/images/train/*.jpg
  BSD500-Val: BSR_bsds500/BSR/BSDS500/data/images/val/*.jpg
  BSD500-Test: BSR_bsds500/BSR/BSDS500/data/images/test/*.jpg
  91-IMAGE: 91-image/
  IMAGENET: Imagenet/20180122/*.jpg
  GOPRO-Train: GOPRO_Large_all/train
  GOPRO-Val: GOPRO_Large_all/test
  MCL-V: MCL-V/train/*.yuv
  WATERLOO: exploration_database_and_code/pristine_images/
  DIV2K-Train: DIV2K/DIV2K_train_HR/
  DIV2K-Val: DIV2K/DIV2K_valid_HR/
  DIV2K-Pred: DIV2K/DIV2K_valid_LR_bicubic/X4/
  PIRM-SelfVal: PIRM/PIRM_Self-Val_set/HR
  PIRM-Val: PIRM/PIRM_Val_set/LR
  # FlyingChairs datasets are split with below file >>
  # https://lmb.informatik.uni-freiburg.de/resources/datasets/FlyingChairs/FlyingChairs_train_val.txt
  # but for convenience, all .flo files are put into a separate folder 'flow'
  FlyingChairs: FlyingChairs/train
  FlyingChairsVal: FlyingChairs/validate
  MiniFlyingChairs: FlyingChairs/data
  FlyingChairsTest: FlyingChairs/test
  FlyingChairsFlow: FlyingChairs/flow/*.flo

Path_Tracked:
  URBAN100: Urban100_SR/image_SRF_4/*HR.*
  SUNHAY80: SunHays80_SR/image_SRF_8/*HR.*
  SET5: Set5_SR/Set5/image_SRF_4/*HR.*
  SET14: Set14_SR/Set14/image_SRF_4/*HR.*
  PIRM-SelfTest: PIRM/PIRM_Self-Val_set/LR
  PIRM-Test: PIRM/PIRM_Test/LR
  VID4-HR: vid4/original/

# bind datasets to a name, called in scripts
Dataset:
  NONE:  # empty set, do nothing
    train: []
    val: []
    test: []

  BSD:  # Combined BSD100 and BSD500 data
    train: [BSD100, BSD500-Train]  # collected in array
    val: BSD500-Val                # point as a single set
    test: [BSD500-Test]

  91-IMAGE:  # Yang's 91 images
    train: 91-IMAGE
    val: [SET5]
    test: [SET5, SET14]

  WATERLOO:  # https://ece.uwaterloo.ca/~k29ma/exploration/
    train: WATERLOO
    val: [SET5, SET14]
    test: [URBAN100, SUNHAY80]

  DIV2K:  # NTIRE-2017 Challenge
    train: DIV2K-Train
    val: [DIV2K-Val]
    test: [SET5, SET14]

  DW2K:
    train: [DIV2K-Train, WATERLOO]
    val: [DIV2K-Val]
    test: []

  MCL-V:  # http://mcl.usc.edu/mcl-v-database/, small set videos
    train: MCL-V
    # TODO: Remove this comment after version 0.6.0
    # Note: Root applies to absolute path now!!!
    val: MCL-V/test/*.yuv     # You can still write absolute path patterns like this,
    test: [MCL-V/test/*.yuv]  # or as array like this
    param:  # For MCL-V is raw data, these param must be specified
      mode: YV12
      width: 1920
      height: 1080

  GOPRO: # https://github.com/SeungjunNah/DeepDeblur_release
    train: [GOPRO-Train]
    val: [GOPRO-Val]
    test: [VID4-HR]

  VID4:  # popular video benchmark baseline
    test: VID4-HR
    infer: vid4/input/

  CHAIRS:  # flying chairs, a popular optical flow train-set
    train: FlyingChairs
    flow: FlyingChairsFlow
    val: FlyingChairsVal
    test: FlyingChairsTest

  MINICHAIRS:  # a small set of flying chairs, for quick testing
    train: MiniFlyingChairs
    flow: FlyingChairsFlow
    val: FlyingChairsVal
    test: FlyingChairsTest

  CELEBA:  # center cropped and resize to 64x64
    # test images are randomly selected (10,000 samples)
    # please refer to VSR/Tools/DataProcessing/CelebA.py for more details
    train: celeba/resize64/*.png
    val: [celeba/test64/000001.png]  # just use as a placeholder
    test: [celeba/test64/*.png]
    infer: []

  CIFAR10:  # well-known cifar-10
    # alpha version, loading ndarray data(s)
    param:
      mode: numpy  # specify `mode` as "numpy"
      numpy:
        # execution python source
        exec: '(x,_),(y,_)=tf.keras.datasets.cifar10.load_data()'
        # specify result variables
        train: 'x'
        val: 'y'
        test: 'y[:10000]'
